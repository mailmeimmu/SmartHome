name: Deploy Backend

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '.github/workflows/deploy-backend.yml'

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate required secrets
        shell: bash
        run: |
          set -euo pipefail
          test -n "${{ secrets.DEPLOY_SSH_KEY }}" || { echo "Missing DEPLOY_SSH_KEY under *Secrets*"; exit 1; }
          test -n "${{ secrets.DEPLOY_HOST }}" || { echo "Missing DEPLOY_HOST under *Secrets*"; exit 1; }
          test -n "${{ secrets.DEPLOY_USER }}" || { echo "Missing DEPLOY_USER under *Secrets*"; exit 1; }

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
          log-public-key: true

      - name: Add host to known_hosts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure target directories exist
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          if [ -z "${DEPLOY_PATH:-}" ]; then DEPLOY_PATH="/var/www/SmartHome"; fi
          ssh "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" "mkdir -p \"$DEPLOY_PATH\""

      - name: Update remote .env (optional)
        shell: bash
        env:
          DEPLOY_ENV_FILE: ${{ secrets.DEPLOY_ENV_FILE }}
          DEPLOY_PATH_SECRET: ${{ secrets.DEPLOY_PATH }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          set -euo pipefail
          DEPLOY_PATH="${DEPLOY_PATH_SECRET}"
          if [ -z "${DEPLOY_PATH:-}" ]; then DEPLOY_PATH="/var/www/SmartHome"; fi

          if [ -n "${DEPLOY_ENV_FILE:-}" ]; then
            printf '%s' "${DEPLOY_ENV_FILE}" | ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > \"$DEPLOY_PATH/.env\""
            echo "Updated $DEPLOY_PATH/.env on remote."
          else
            echo "No DEPLOY_ENV_FILE provided; skipping .env update."
          fi

      - name: Sync project files
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          if [ -z "${DEPLOY_PATH:-}" ]; then DEPLOY_PATH="/var/www/SmartHome"; fi
          rsync -az --delete \
            --exclude '.env' \
            --exclude 'node_modules' \
            --exclude '.git' \
            ./ "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${DEPLOY_PATH}/"
          # For a custom SSH port, add:  -e "ssh -p 2222"

      - name: Publish server .env from repository
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          if [ -z "${DEPLOY_PATH:-}" ]; then DEPLOY_PATH="/var/www/SmartHome"; fi
          ssh "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" bash -c "
            set -euo pipefail
            SRC=\"$DEPLOY_PATH/server/.env.example\"
            DEST=\"$DEPLOY_PATH/server/.env\"
            if [ ! -f \"$SRC\" ]; then
              echo 'Missing server/.env.example on remote.' >&2
              exit 1
            fi
            cp \"$SRC\" \"$DEST\"
          "

      - name: Install deps, migrate, reload
        shell: bash
        env:
          APP_NAME: ${{ secrets.PM2_APP_NAME || 'smarthome-backend' }}
        run: |
          set -euo pipefail
          DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
          if [ -z "${DEPLOY_PATH:-}" ]; then DEPLOY_PATH="/var/www/SmartHome"; fi
          REMOTE_PATH="$DEPLOY_PATH"

          ssh "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" bash -c "
            set -euo pipefail
            cd \"$REMOTE_PATH\"

            command -v npm >/dev/null 2>&1 || { echo 'npm not in PATH on remote host'; exit 1; }
            npm ci --omit=dev

            if [ -f scripts/migrate.js ]; then
              node scripts/migrate.js
            fi

            if ! command -v pm2 >/dev/null 2>&1; then
              echo 'pm2 not found; install with: npm i -g pm2'; exit 1
            fi

            if [ -f ecosystem.config.js ]; then
              pm2 startOrReload ecosystem.config.js --only \"${APP_NAME}\" || pm2 start ecosystem.config.js --only \"${APP_NAME}\"
            else
              if pm2 describe \"${APP_NAME}\" >/dev/null 2>&1; then
                pm2 reload \"${APP_NAME}\"
              else
                pm2 start src/app.js --name \"${APP_NAME}\"
              fi
            fi

            pm2 save || true
          "
